// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel kernelCyanAtributeCalCs
#pragma kernel kernelMagentaAtributeCalCs
#pragma kernel kernelYellowAtributeCalCs
#pragma kernel kernelBlackAtributeCalCs
#pragma kernel HorzBlurCs
#pragma kernel VertBlurCs

#include "particlesStruct.cginc"


Texture2D<float4> source;
RWTexture2D<float4> verBlurOutput;
shared RWTexture2D<float4> horBlurOutput;

#define CacheSize (dispatchSize + 2*maxRadius)
groupshared float4 gCache[CacheSize];


RWStructuredBuffer<halftonePoint> visibleCyanPoints;
RWStructuredBuffer<halftonePoint> visibleMagentaPoints;
RWStructuredBuffer<halftonePoint> visibleYellowPoints;
RWStructuredBuffer<halftonePoint> visibleBlackPoints;

cbuffer onValidate
{
    int blurRadius;
    int resolutionX;
    int resolutionY;
}

inline void updatePoints(uint idx, RWStructuredBuffer<halftonePoint> points, float3 colorMask, float power)
{
    float2 normalizedScreenPos = saturate(points[idx].position * float2(0.5f, 0.5f) + float2(0.5f, 0.5f));
    uint2 loadPositon = uint2(min(normalizedScreenPos.x * (resolutionX), resolutionX - 1), min(normalizedScreenPos.y * (resolutionY),resolutionY - 1));
    float3 texColor = pow(verBlurOutput.Load(loadPositon).rgb, 1.0f);
    float grayscale = saturate(dot((texColor), normalize(float3(0.299, 0.587, 0.114) * colorMask)));
    points[idx].density = 1.0f - grayscale;

}

[numthreads(dispatchSize, 1, 1)]
void kernelCyanAtributeCalCs(uint3 id : SV_DispatchThreadID)
{
    updatePoints(id.x, visibleCyanPoints, float3(1.0f, 0.0f, 0.0f), 2.2f);
}
[numthreads(dispatchSize, 1, 1)]
void kernelMagentaAtributeCalCs(uint3 id : SV_DispatchThreadID)
{
    updatePoints(id.x, visibleMagentaPoints, float3(0.0f, 1.0f, 0.0f), 2.2f);
}
[numthreads(dispatchSize, 1, 1)]
void kernelYellowAtributeCalCs(uint3 id : SV_DispatchThreadID)
{
    updatePoints(id.x, visibleYellowPoints, float3(0.0f, 0.0f, 1.0f), 2.2f);
}
[numthreads(dispatchSize, 1, 1)]
void kernelBlackAtributeCalCs(uint3 id : SV_DispatchThreadID)
{
    updatePoints(id.x, visibleBlackPoints, float3(1.0f, 1.0f, 1.0f), 1.0);
}

[numthreads(dispatchSize, 1, 1)]
void HorzBlurCs(uint3 groupThreadID : SV_GroupThreadID, uint3 dispatchThreadId : SV_DispatchThreadID)
{
    int clamedDisX = min(dispatchThreadId.x, source.Length.x - 1);
    int clamedDisY = min(dispatchThreadId.y, source.Length.y - 1);
    uint bRadius = (uint) blurRadius;
    if (groupThreadID.x < bRadius)
    {
        int x = max(clamedDisX - blurRadius, 0);
        uint2 clampedPos = uint2(x, clamedDisY);
        gCache[groupThreadID.x] = source[clampedPos];

    }
    else if (groupThreadID.x >= dispatchSize - bRadius) // 2 zakres
    {
        int x = min(clamedDisX + blurRadius, source.Length.x - 1);
        uint2 clampedPos = uint2(x, clamedDisY);
        gCache[groupThreadID.x + 2 * blurRadius] = source[clampedPos];

    }

    uint2 clampedPos = uint2(clamedDisX, clamedDisY);
    gCache[groupThreadID.x + blurRadius] = source[clampedPos];

    GroupMemoryBarrierWithGroupSync();
    float4 blurColor = float4(0.0f, 0.0f, 0.0f, 0.0f);

    [unroll(2*maxRadius)]
    for (int i = -blurRadius; i <= blurRadius; i++)
    {
        int k = groupThreadID.x + blurRadius + i;
        blurColor += gCache[k];

    }
    horBlurOutput[uint2(dispatchThreadId.x, dispatchThreadId.y)] = blurColor * 1.0f / (blurRadius * 2 + 1);

}

[numthreads(1, dispatchSize, 1)]
void VertBlurCs(uint3 groupThreadID : SV_GroupThreadID, uint3 dispatchThreadId : SV_DispatchThreadID)
{
    int clamedDisX = min(max(dispatchThreadId.x, 0), horBlurOutput.Length.x - 1);
    int clamedDisY = min(max(dispatchThreadId.y, 0), horBlurOutput.Length.y - 1);
    uint bRadius = (uint) blurRadius;
    if (groupThreadID.y < bRadius)
    {
        int y = max(clamedDisY - blurRadius, 0);
        uint2 clampedPos = uint2(clamedDisX, y);
        gCache[groupThreadID.y] = horBlurOutput.Load(clampedPos);
    }
    else if (groupThreadID.y >= dispatchSize - bRadius)
    {
        int y = min(clamedDisY + blurRadius, horBlurOutput.Length.y - 1);
        uint2 clampedPos = uint2(clamedDisX, y);
        gCache[groupThreadID.y + 2 * blurRadius] = horBlurOutput.Load(clampedPos);

    }
    gCache[groupThreadID.y + blurRadius] = horBlurOutput.Load(uint2(clamedDisX, clamedDisY));

    GroupMemoryBarrierWithGroupSync();
    float4 blurColor = float4(0.0f, 0.0f, 0.0f, 0.0f);

    [unroll(2*maxRadius)]
    for (int i = -blurRadius; i <= blurRadius; i++)
    {
        int k = groupThreadID.y + blurRadius + i;
        blurColor += gCache[k];
    }
    verBlurOutput[uint2(dispatchThreadId.x, dispatchThreadId.y)] = blurColor * 1.0f / (blurRadius * 2 + 1);
}

